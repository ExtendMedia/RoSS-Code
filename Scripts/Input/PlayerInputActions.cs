//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RoSS
{
    public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMain"",
            ""id"": ""b51d460d-799f-40d0-b614-8c5c59d2cdb7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""805c4154-4a22-4f7f-82a9-33a2a93e0441"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MainAttack"",
                    ""type"": ""Button"",
                    ""id"": ""76238b3f-3d56-44fc-ab80-0dd6b91fcd32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""77fc48ee-cf5c-4c54-957b-95b4eb977d1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9de47646-ea18-4d62-b849-b96f33f4e99a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccf4fbb9-d586-4026-9b09-303a76908dc2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f417b750-faf8-4081-847d-068e6efac912"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMain
            m_PlayerMain = asset.FindActionMap("PlayerMain", throwIfNotFound: true);
            m_PlayerMain_Move = m_PlayerMain.FindAction("Move", throwIfNotFound: true);
            m_PlayerMain_MainAttack = m_PlayerMain.FindAction("MainAttack", throwIfNotFound: true);
            m_PlayerMain_SpecialAttack = m_PlayerMain.FindAction("SpecialAttack", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMain
        private readonly InputActionMap m_PlayerMain;
        private IPlayerMainActions m_PlayerMainActionsCallbackInterface;
        private readonly InputAction m_PlayerMain_Move;
        private readonly InputAction m_PlayerMain_MainAttack;
        private readonly InputAction m_PlayerMain_SpecialAttack;
        public struct PlayerMainActions
        {
            private @PlayerInputActions m_Wrapper;
            public PlayerMainActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerMain_Move;
            public InputAction @MainAttack => m_Wrapper.m_PlayerMain_MainAttack;
            public InputAction @SpecialAttack => m_Wrapper.m_PlayerMain_SpecialAttack;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMain; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMainActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerMainActions instance)
            {
                if (m_Wrapper.m_PlayerMainActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMove;
                    @MainAttack.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMainAttack;
                    @MainAttack.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMainAttack;
                    @MainAttack.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnMainAttack;
                    @SpecialAttack.started -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnSpecialAttack;
                    @SpecialAttack.performed -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnSpecialAttack;
                    @SpecialAttack.canceled -= m_Wrapper.m_PlayerMainActionsCallbackInterface.OnSpecialAttack;
                }
                m_Wrapper.m_PlayerMainActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @MainAttack.started += instance.OnMainAttack;
                    @MainAttack.performed += instance.OnMainAttack;
                    @MainAttack.canceled += instance.OnMainAttack;
                    @SpecialAttack.started += instance.OnSpecialAttack;
                    @SpecialAttack.performed += instance.OnSpecialAttack;
                    @SpecialAttack.canceled += instance.OnSpecialAttack;
                }
            }
        }
        public PlayerMainActions @PlayerMain => new PlayerMainActions(this);
        public interface IPlayerMainActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMainAttack(InputAction.CallbackContext context);
            void OnSpecialAttack(InputAction.CallbackContext context);
        }
    }
}